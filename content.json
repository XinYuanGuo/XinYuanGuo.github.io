{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"React-Query","slug":"first-article","date":"2022-12-28T09:29:06.000Z","updated":"2022-12-28T10:10:27.260Z","comments":true,"path":"2022/12/28/first-article/","link":"","permalink":"http://example.com/2022/12/28/first-article/","excerpt":"","text":"介绍 firtReact Query 是一个库，可以为任何类型的异步数据提供 ReactJs 状态管理功能。 React Query is often described as the missing data-fetching library for React, but in more technical terms, it makes fetching, caching, synchronizing and updating server state in your React applications a breeze. 理解：一般而言，开发人员要用自定义钩子来手动构建数据获取的状态，如 loading、error、success 等，React Query 帮助我们整合了这些状态，并且提供了缓存、对数据扩展处理、性能优化（如分页和延迟加载数据）、乐观更新等功能。 用法useQuery12345const fetchUsers = async () =&gt; &#123; const res = await fetch(&quot;https://jsonplaceholder.typicode.com/users&quot;); return res.json();&#125;;const response = uesQuery(&quot;users&quot;, fetchUsers); useQuery 接收两个参数 第一个是唯一的键名，最好是字符串，也可以是数组或对象 第二个是获取数据的异步函数 第三个是一个可配置对象，可不传 useQuery 返回值： data, error, failureCount, isError, isFetchedAfterMount, isFetching, isIdle, isLoading, isPreviousData, isStale, isSuccess, refetch,remove, status, QueryClient1const queryClient = useQueryClient(); queryClient.getQueryData从缓存中获取数据 1const data = queryClient.getQueryData(queryKey, 配置过滤对象); queryClient.setQueryData设置缓存查询数据，如果在默认的 5 分钟的缓存时间中查询钩子没有利用该查询，该查询会被垃圾回收。 queryClient.invalidateQueries使匹配的查询失效并重新获取 Mutation突变，用来改变数据状态 1234567891011const [ mutate, &#123; status, isIdle, isLoading, isSuccess, isError, data, error, reset &#125;,] = useMutation(mutationFn, &#123; onMutate, onSuccess, onError, onSettled, throwOnError, useErrorBoundary,&#125;);","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-12-28T08:57:19.970Z","updated":"2022-12-28T08:57:19.970Z","comments":true,"path":"2022/12/28/hello-world/","link":"","permalink":"http://example.com/2022/12/28/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}